{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://dappforge/./node_modules/@polka/url/index.js","webpack://dappforge/./node_modules/polka/index.js","webpack://dappforge/./node_modules/trouter/index.js","webpack://dappforge/./src/config.ts","webpack://dappforge/./src/constants.ts","webpack://dappforge/./src/extension.ts","webpack://dappforge/./src/getNonce.ts","webpack://dappforge/./src/modules/TokenManager.ts","webpack://dappforge/./src/modules/authenticate.ts","webpack://dappforge/./src/modules/lineGenerator.ts","webpack://dappforge/./src/modules/lock.ts","webpack://dappforge/./src/modules/ollamaCheckModel.ts","webpack://dappforge/./src/modules/ollamaDownloadModel.ts","webpack://dappforge/./src/modules/ollamaTokenGenerator.ts","webpack://dappforge/./src/modules/text.ts","webpack://dappforge/./src/prompts/autocomplete.ts","webpack://dappforge/./src/prompts/filter.ts","webpack://dappforge/./src/prompts/preparePrompt.ts","webpack://dappforge/./src/prompts/processors/detectLanguage.ts","webpack://dappforge/./src/prompts/processors/languages.ts","webpack://dappforge/./src/prompts/processors/models.ts","webpack://dappforge/./src/prompts/promptCache.ts","webpack://dappforge/./src/providers/SidebarProvider.ts","webpack://dappforge/./src/providers/provider.ts","webpack://dappforge/./src/utils.ts","webpack://dappforge/external commonjs \"vscode\"","webpack://dappforge/external node-commonjs \"http\"","webpack://dappforge/external node-commonjs \"path\"","webpack://dappforge/external node-commonjs \"querystring\"","webpack://dappforge/./node_modules/@arr/every/module.js","webpack://dappforge/./node_modules/matchit/lib/matchit.mjs","webpack://dappforge/webpack/bootstrap","webpack://dappforge/webpack/runtime/define property getters","webpack://dappforge/webpack/runtime/hasOwnProperty shorthand","webpack://dappforge/webpack/runtime/make namespace object","webpack://dappforge/webpack/startup"],"sourcesContent":["module.exports = function (req) {\n\tlet url = req.url;\n\tif (url === void 0) return url;\n\n\tlet obj = req._parsedUrl;\n\tif (obj && obj._raw === url) return obj;\n\n\tobj = {};\n\tobj.query = obj.search = null;\n\tobj.href = obj.path = obj.pathname = url;\n\n\tlet idx = url.indexOf('?', 1);\n\tif (idx !== -1) {\n\t\tobj.search = url.substring(idx);\n\t\tobj.query = obj.search.substring(1);\n\t\tobj.pathname = url.substring(0, idx);\n\t}\n\n\tobj._raw = url;\n\n\treturn (req._parsedUrl = obj);\n}\n","const http = require('http');\nconst Router = require('trouter');\nconst { parse } = require('querystring');\nconst parser = require('@polka/url');\n\nfunction lead(x) {\n\treturn x.charCodeAt(0) === 47 ? x : ('/' + x);\n}\n\nfunction value(x) {\n  let y = x.indexOf('/', 1);\n  return y > 1 ? x.substring(0, y) : x;\n}\n\nfunction mutate(str, req) {\n\treq.url = req.url.substring(str.length) || '/';\n\treq.path = req.path.substring(str.length) || '/';\n}\n\nfunction onError(err, req, res, next) {\n\tlet code = (res.statusCode = err.code || err.status || 500);\n\tres.end(err.length && err || err.message || http.STATUS_CODES[code]);\n}\n\nclass Polka extends Router {\n\tconstructor(opts={}) {\n\t\tsuper(opts);\n\t\tthis.apps = {};\n\t\tthis.wares = [];\n\t\tthis.bwares = {};\n\t\tthis.parse = parser;\n\t\tthis.server = opts.server;\n\t\tthis.handler = this.handler.bind(this);\n\t\tthis.onError = opts.onError || onError; // catch-all handler\n\t\tthis.onNoMatch = opts.onNoMatch || this.onError.bind(null, { code:404 });\n\t}\n\n\tadd(method, pattern, ...fns) {\n\t\tlet base = lead(value(pattern));\n\t\tif (this.apps[base] !== void 0) throw new Error(`Cannot mount \".${method.toLowerCase()}('${lead(pattern)}')\" because a Polka application at \".use('${base}')\" already exists! You should move this handler into your Polka application instead.`);\n\t\treturn super.add(method, pattern, ...fns);\n\t}\n\n\tuse(base, ...fns) {\n\t\tif (typeof base === 'function') {\n\t\t\tthis.wares = this.wares.concat(base, fns);\n\t\t} else if (base === '/') {\n\t\t\tthis.wares = this.wares.concat(fns);\n\t\t} else {\n\t\t\tbase = lead(base);\n\t\t\tfns.forEach(fn => {\n\t\t\t\tif (fn instanceof Polka) {\n\t\t\t\t\tthis.apps[base] = fn;\n\t\t\t\t} else {\n\t\t\t\t\tlet arr = this.bwares[base] || [];\n\t\t\t\t\tarr.length > 0 || arr.push((r, _, nxt) => (mutate(base, r),nxt()));\n\t\t\t\t\tthis.bwares[base] = arr.concat(fn);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this; // chainable\n\t}\n\n\tlisten() {\n\t\t(this.server = this.server || http.createServer()).on('request', this.handler);\n\t\tthis.server.listen.apply(this.server, arguments);\n\t\treturn this;\n\t}\n\n\thandler(req, res, info) {\n\t\tinfo = info || this.parse(req);\n\t\tlet fns=[], arr=this.wares, obj=this.find(req.method, info.pathname);\n\t\treq.originalUrl = req.originalUrl || req.url;\n\t\tlet base = value(req.path = info.pathname);\n\t\tif (this.bwares[base] !== void 0) {\n\t\t\tarr = arr.concat(this.bwares[base]);\n\t\t}\n\t\tif (obj) {\n\t\t\tfns = obj.handlers;\n\t\t\treq.params = obj.params;\n\t\t} else if (this.apps[base] !== void 0) {\n\t\t\tmutate(base, req); info.pathname=req.path; //=> updates\n\t\t\tfns.push(this.apps[base].handler.bind(null, req, res, info));\n\t\t} else if (fns.length === 0) {\n\t\t\tfns.push(this.onNoMatch);\n\t\t}\n\t\t// Grab addl values from `info`\n\t\treq.search = info.search;\n\t\treq.query = parse(info.query);\n\t\t// Exit if only a single function\n\t\tlet i=0, len=arr.length, num=fns.length;\n\t\tif (len === i && num === 1) return fns[0](req, res);\n\t\t// Otherwise loop thru all middlware\n\t\tlet next = err => err ? this.onError(err, req, res, next) : loop();\n\t\tlet loop = _ => res.finished || (i < len) && arr[i++](req, res, next);\n\t\tarr = arr.concat(fns);\n\t\tlen += num;\n\t\tloop(); // init\n\t}\n}\n\nmodule.exports = opts => new Polka(opts);\n","const { exec, match, parse } = require('matchit');\n\nclass Trouter {\n\tconstructor(opts) {\n\t\tthis.opts = opts || {};\n\t\tthis.routes = {};\n\t\tthis.handlers = {};\n\n\t\tthis.all = this.add.bind(this, '*');\n\t\tthis.get = this.add.bind(this, 'GET');\n\t\tthis.head = this.add.bind(this, 'HEAD');\n\t\tthis.patch = this.add.bind(this, 'PATCH');\n\t\tthis.options = this.add.bind(this, 'OPTIONS');\n    this.connect = this.add.bind(this, 'CONNECT');\n\t\tthis.delete = this.add.bind(this, 'DELETE');\n    this.trace = this.add.bind(this, 'TRACE');\n\t\tthis.post = this.add.bind(this, 'POST');\n\t\tthis.put = this.add.bind(this, 'PUT');\n\t}\n\n\tadd(method, pattern, ...fns) {\n\t\t// Save decoded pattern info\n\t\tif (this.routes[method] === void 0) this.routes[method]=[];\n\t\tthis.routes[method].push(parse(pattern));\n\t\t// Save route handler(s)\n\t\tif (this.handlers[method] === void 0) this.handlers[method]={};\n\t\tthis.handlers[method][pattern] = fns;\n\t\t// Allow chainable\n\t\treturn this;\n\t}\n\n\tfind(method, url) {\n\t\tlet arr = match(url, this.routes[method] || []);\n\t\tif (arr.length === 0) {\n\t\t\tarr = match(url, this.routes[method='*'] || []);\n\t\t\tif (!arr.length) return false;\n\t\t}\n\t\treturn {\n\t\t\tparams: exec(url, arr),\n\t\t\thandlers: this.handlers[method][arr[0].old]\n\t\t};\n\t}\n}\n\nmodule.exports = Trouter;\n","import vscode from 'vscode';\nimport { ModelFormat } from './prompts/processors/models';\n\nclass Config {\n\n    // Inference\n    get inference() {\n        let config = this.#config;\n\n        let aiProvider = (config.get('aiProvider') as string).trim();\n        if (aiProvider === '') {\n            aiProvider = 'dAppForge';\n        }\n \n        // Load endpoint\n        let endpoint = (config.get('endpoint') as string).trim();\n        if (endpoint.endsWith('/')) {\n            endpoint = endpoint.slice(0, endpoint.length - 1).trim();\n        }\n        if (endpoint === '') {\n            endpoint = 'http://127.0.0.1:11434';\n        }\n        let bearerToken = config.get('bearerToken') as string;\n\n        // Load general paremeters\n        let maxLines = config.get('maxLines') as number;\n        let maxTokens = config.get('maxTokens') as number;\n        let temperature = config.get('temperature') as number;\n\n        // Load model\n        let modelName = config.get('model') as string;\n        let modelFormat: ModelFormat = 'codellama';\n        if (modelName === 'custom') {\n            modelName = config.get('custom.model') as string;\n            modelFormat = config.get('cutom.format') as ModelFormat;\n        } else {\n            if (modelName.startsWith('deepseek-coder')) {\n                modelFormat = 'deepseek';\n            } else if (modelName.startsWith('stable-code')) {\n                modelFormat = 'stable-code';\n            }\n        }\n\n        let delay = config.get('delay') as number;\n\n        return {\n            aiProvider,\n            endpoint,\n            bearerToken,\n            maxLines,\n            maxTokens,\n            temperature,\n            modelName,\n            modelFormat,\n            delay\n        };\n    }\n\n    // Notebook\n    get notebook() {\n        let config = vscode.workspace.getConfiguration('notebook');\n\n        let includeMarkup = config.get('includeMarkup') as boolean;\n        let includeCellOutputs = config.get('includeCellOutputs') as boolean;\n        let cellOutputLimit = config.get('cellOutputLimit') as number;\n        return {\n            includeMarkup,\n            includeCellOutputs,\n            cellOutputLimit,\n        };\n    }\n\n    get #config() {\n        return vscode.workspace.getConfiguration('inference');\n    };\n}\n\nexport const config = new Config();","export function getApiBaseUrl(environment: string): string {\n    return environment === 'dev'\n      ? \"http://127.0.0.1:35245\"\n      : \"https://xs84120lea.execute-api.us-east-1.amazonaws.com/prod\";\n  }\n\nexport const SERVER_PORT = 54021;\nexport const INLINE_COMPLETION_ACCEPTED_COMMAND = 'dappforge.InlineCompletionAccepted';\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\nimport { SidebarProvider } from './providers/SidebarProvider';\nimport { authenticate } from './modules/authenticate';\nimport { API_BASE_URL, TokenManager, USER_ID_KEY } from './modules/TokenManager';\nimport { PromptProvider } from './providers/provider';\nimport { getApiBaseUrl, INLINE_COMPLETION_ACCEPTED_COMMAND } from './constants';\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\n\tconst config = vscode.workspace.getConfiguration('dAppForge');\n\tconst environment = config.get<string>('environment', 'dev');\n\tconsole.log(`Environment: ${environment}`);\n\t\n\tTokenManager.globalState = context.globalState;\n\tTokenManager.setBasicAuthToken();\n\tif (!TokenManager.loggedIn()) {\n\t\tTokenManager.resetTokens();\n\t}\n\tTokenManager.setToken(API_BASE_URL, getApiBaseUrl(environment));\n\n\t// Create status bar\n\tlet statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 100);\n\tcontext.subscriptions.push(statusBarItem);\n\tstatusBarItem.command = 'dappforge.toggle';\n\tstatusBarItem.text = `$(chip) dAppForge`;\n\tstatusBarItem.show();\n\n\t// Settings\n\tcontext.subscriptions.push(vscode.commands.registerCommand('dappforge.openSettings', () => {\n\t\tvscode.commands.executeCommand('workbench.action.openSettings', '@ext:dappforge.dappforge');\n\t}));\n\n\t// Create provider\n\tconst provider = new PromptProvider(statusBarItem, context);\n\tcontext.subscriptions.push(vscode.languages.registerInlineCompletionItemProvider({ pattern: '**', }, provider));\n\n\tcontext.subscriptions.push(vscode.commands.registerCommand('dappforge.pause', () => {\n\t\tprovider.paused = true;\n\t}));\n\tcontext.subscriptions.push(vscode.commands.registerCommand('dappforge.resume', () => {\n\t\tprovider.paused = false;\n\t}));\n\tcontext.subscriptions.push(vscode.commands.registerCommand('dappforge.toggle', () => {\n\t\tprovider.paused = !provider.paused;\n\t}));\n\n\tcontext.subscriptions.push(vscode.commands.registerCommand('dappforge.authorised', () => {\n\t\tprovider.authorised = true;\n\t}));\n\n\tcontext.subscriptions.push(vscode.commands.registerCommand('dappforge.unauthorised', () => {\n\t\tprovider.authorised = false;\n\t}));\n\n\t// Sidebar provider\n\tconst sidebarProvider = new SidebarProvider(context.extensionUri);\n\tcontext.subscriptions.push(\n\t\tvscode.window.registerWebviewViewProvider(\"dappforge-sidebar\", sidebarProvider)\n\t);\n\tcontext.subscriptions.push(\n\t\tvscode.commands.registerCommand(\"dappforge.authenticate\", () => {\n\t\t\ttry {\n\t\t\t\tauthenticate();\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(err);\n\t\t\t}\n\t\t})\n\t);\n\tcontext.subscriptions.push(\n\t\tvscode.commands.registerCommand(\"dappforge.refresh\", async () => {\n\t\t  \tawait vscode.commands.executeCommand(\"workbench.action.closeSidebar\");\n\t\t  \tawait vscode.commands.executeCommand(\n\t\t\t\t\"workbench.view.extension.dappforge-sidebar-view\"\n\t\t  \t);\n\t\t})\n\t);\n\n\tcontext.subscriptions.push(\n\t\tvscode.commands.registerCommand(INLINE_COMPLETION_ACCEPTED_COMMAND, () => {\n\t\t\t//vscode.window.showInformationMessage('Inline completion accepted!');\n\t\t\t// Call webview to decrement token count\n\t\t\tconst tokenCount = provider.completionAccepted(sidebarProvider, 1);\n\t\t})\n\t);\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n","export function getNonce() {\n  let text = \"\";\n  const possible =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  for (let i = 0; i < 32; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\n","import * as vscode from \"vscode\";\nimport { getBasicAuthToken } from \"../utils\";\n\nexport const ACCESS_TOKEN_KEY = \"dappforgeaccesstoken\";\nexport const REFRESH_TOKEN_KEY = \"dappforgerefreshtoken\";\nexport const USER_ID_KEY = \"dappforgeuserid\";\nexport const BASIC_AUTH_TOKEN = \"dappforgebasicauth\";\nexport const TOKEN_COUNT = \"dappforgetokencount\";\nexport const API_BASE_URL = \"dappforgetokenapibaseurl\";\nexport const AUTO_COMPLETE_ACTIVE = \"dappforgetokenautocompleteactive\";\n\nexport class TokenManager {\n  static globalState: vscode.Memento;\n\n  static setBasicAuthToken() {\n    this.setToken(BASIC_AUTH_TOKEN, getBasicAuthToken());\n  }\n\n  static setToken(key: string, token: string) {\n    return this.globalState.update(key, token);\n  }\n\n  static getToken(key: string): string | undefined {\n    return this.globalState.get(key);\n  }\n\n  static getTokensAsJsonString(): string {\n    return JSON.stringify({\n        basicAuthToken: TokenManager.getToken(BASIC_AUTH_TOKEN),\n        userId: TokenManager.getToken(USER_ID_KEY), \n        accessToken: TokenManager.getToken(ACCESS_TOKEN_KEY), \n        refreshToken: TokenManager.getToken(REFRESH_TOKEN_KEY)});\n  }\n\n  static setTokens(id: string, accessToken: string, refreshToken: string) {\n    this.setToken(USER_ID_KEY, id);\n    this.setToken(ACCESS_TOKEN_KEY, accessToken);\n    this.setToken(REFRESH_TOKEN_KEY, refreshToken);\n  }\n\n  static resetTokens() {\n    this.setToken(USER_ID_KEY, \"\");\n    this.setToken(ACCESS_TOKEN_KEY, \"\");\n    this.setToken(REFRESH_TOKEN_KEY, \"\");\n    this.setToken(TOKEN_COUNT, \"0\");\n  }\n\n  static getTokenCount(): number {\n    const count: string | undefined = this.getToken(TOKEN_COUNT);\n    if (count && count.length > 0) {\n      return Number(count);\n    } else {\n      return 0;\n    }\n  }\n\n  static loggedIn(): boolean {\n    return (TokenManager.getToken(USER_ID_KEY) && TokenManager.getToken(USER_ID_KEY) !== \"\") ? true : false;\n  }\n}","import * as vscode from 'vscode';\nimport { SERVER_PORT } from '../constants';\nimport polka from \"polka\";\nimport { API_BASE_URL, TokenManager } from './TokenManager';\n\nlet app: any = null;\nexport const authenticate = async (fn?: () => void) => {\n    if (app) { (app as any).server.close(); }\n\n    const apiBaseUrl = TokenManager.getToken(API_BASE_URL);\n    app = polka();\n\n    app.get(`/auth/:id/:accessToken/:refreshToken`, async (req: any, res: any) => {\n        const { id, accessToken, refreshToken } = req.params;\n        if (!accessToken || !refreshToken) {\n            res.end(`<h1>Failed to authenticate, something went wrong</h1>`);\n            return;\n        }\n        TokenManager.setTokens(id, accessToken, refreshToken);\n        if (fn) { fn(); }\n  \n        res.end(`<h1>dAppForge authentication was successful, you can close this now</h1>`);\n  \n        (app as any).server.close();\n        app = null;\n    });\n  \n    app.listen(SERVER_PORT, (err: Error) => {\n        if (err) {\n            vscode.window.showErrorMessage(err.message);\n        } else {\n            vscode.commands.executeCommand(\n                \"vscode.open\",\n                vscode.Uri.parse(`${apiBaseUrl}/auth/github`)\n            );\n        }\n    });\n};","export async function* lineGenerator(url: string, data: any, bearerToken: string): AsyncGenerator<string> {\n    // Request\n    const controller = new AbortController();\n    let res = await fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: bearerToken ? {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${bearerToken}`,\n          } : {\n            'Content-Type': 'application/json',\n          },\n      signal: controller.signal,\n    });\n    if (!res.ok || !res.body) {\n        throw Error('Unable to connect to backend');\n    }\n\n    // Reading stream\n    let stream = res.body.getReader();\n    const decoder = new TextDecoder();\n    let pending: string = '';\n    try {\n        while (true) {\n            const { done, value } = await stream.read();\n\n            // If ended\n            if (done) {\n                if (pending.length > 0) { // New lines are impossible here\n                    yield pending;\n                }\n                break;\n            }\n\n            // Append chunk\n            let chunk = decoder.decode(value);\n            console.warn(chunk);\n            pending += chunk;\n\n            // Yield results \n            while (pending.indexOf('\\n') >= 0) {\n                let offset = pending.indexOf('\\n');\n                yield pending.slice(0, offset);\n                pending = pending.slice(offset + 1);\n            }\n        }\n    } finally {\n        stream.releaseLock();\n        if (!stream.closed) { // Stop generation\n            await stream.cancel();\n        }\n        controller.abort();\n    }\n}","export class AsyncLock {\n    private permits: number = 1;\n    private promiseResolverQueue: Array<(v: boolean) => void> = [];\n\n    async inLock<T>(func: () => Promise<T> | T): Promise<T> {\n        try {\n            await this.lock();\n            return await func();\n        } finally {\n            this.unlock();\n        }\n    }\n\n    private async lock() {\n        if (this.permits > 0) {\n            this.permits = this.permits - 1;\n            return;\n        }\n        await new Promise<boolean>(resolve => this.promiseResolverQueue.push(resolve));\n    }\n\n    private unlock() {\n        this.permits += 1;\n        if (this.permits > 1 && this.promiseResolverQueue.length > 0) {\n            throw new Error('this.permits should never be > 0 when there is someone waiting.');\n        } else if (this.permits === 1 && this.promiseResolverQueue.length > 0) {\n            // If there is someone else waiting, immediately consume the permit that was released\n            // at the beginning of this function and let the waiting function resume.\n            this.permits -= 1;\n\n            const nextResolver = this.promiseResolverQueue.shift();\n            // Resolve on the next tick\n            if (nextResolver) {\n                setTimeout(() => {\n                    nextResolver(true);\n                }, 0);\n            }\n        }\n    }\n}","export async function ollamaCheckModel(endpoint: string, model: string, bearerToken: string) {\n    // Check if exists\n    let res = await fetch(endpoint + '/api/tags', {\n      headers: bearerToken ? {\n            Authorization: `Bearer ${bearerToken}`,\n          } : {},\n    });\n    if (!res.ok) {\n        console.log(await res.text());\n        console.log(endpoint + '/api/tags');\n        throw Error('Network response was not ok.');\n    }\n    let body = await res.json() as { models: { name: string }[] };\n    if (body.models.find((v) => v.name === model)) {\n        return true;\n    } else {\n        return false;\n    }\n}","import { lineGenerator } from \"./lineGenerator\";\n\nexport async function ollamaDownloadModel(endpoint: string, model: string, bearerToken: string) {\n    console.log('Downloading model from ollama: ' + model);\n    for await (let line of lineGenerator(endpoint + '/api/pull', { name: model }, bearerToken)) {\n        console.log('[DOWNLOAD] ' + line);\n    }\n}","import { lineGenerator } from \"./lineGenerator\";\n\nexport type OllamaToken = {\n    model: string,\n    response: string,\n    done: boolean\n};\n\nexport async function* ollamaTokenGenerator(url: string, data: any, bearerToken: string): AsyncGenerator<OllamaToken> {\n    for await (let line of lineGenerator(url, data, bearerToken)) {\n        console.log('Receive line: ' + line);\n        let parsed: OllamaToken;\n        try {\n            parsed = JSON.parse(line) as OllamaToken;\n        } catch (e) { \n            console.warn('Receive wrong line: ' + line);\n            continue;\n        }\n        yield parsed;\n    }\n}","export function countLines(src: string) {\n    return countSymbol(src, '\\n') + 1;\n}\n\nexport function isBlank(src: string) {\n    return src.trim().length === 0;\n}\n\nexport function indentWidth(src: string) {\n    for (let i = 0; i < src.length; i++) {\n        if (!isBlank(src[i])) {\n            return i;\n        }\n    }\n    return src.length;\n}\n\nexport function trimIndent(src: string) {\n\n    // Prase lines\n    let lines = src.split('\\n');\n    if (lines.length === 0) {\n        return '';\n    }\n    if (lines.length === 1) {\n        return lines[0].trim();\n    }\n\n    // Remove first and last empty line\n    if (isBlank(lines[0])) {\n        lines = lines.slice(1);\n    }\n    if (isBlank(lines[lines.length - 1])) {\n        lines = lines.slice(0, lines.length - 1);\n    }\n    if (lines.length === 0) {\n        return '';\n    }\n\n    // Find minimal indent\n    let indents = lines.filter((v) => !isBlank(v)).map((v) => indentWidth(v));\n    let minimal = indents.length > 0 ? Math.min(...indents) : 0;\n\n    // Trim indent\n    return lines.map((v) => isBlank(v) ? '' : v.slice(minimal).trimEnd()).join('\\n');\n}\n\nexport function trimEndBlank(src: string) {\n    let lines = src.split('\\n');\n    for (let i = lines.length - 1; i++; i >= 0) {\n        if (isBlank(lines[i])) {\n            lines.splice(i);\n        }\n    }\n    return lines.join('\\n');\n}\n\nexport function countSymbol(src: string, char: string) {\n    let res = 0;\n    for (let i = 0; i < src.length; i++) {\n        if (src[i] === char) {\n            res++;\n        }\n    }\n    return res;\n}","import { escape } from 'querystring';\nimport { getApiBaseUrl } from '../constants';\nimport { JSONParser } from '../modules/jsonParser';\nimport { ollamaTokenGenerator } from '../modules/ollamaTokenGenerator';\nimport { countSymbol } from '../modules/text';\nimport { ACCESS_TOKEN_KEY, API_BASE_URL, REFRESH_TOKEN_KEY, TokenManager, USER_ID_KEY } from '../modules/TokenManager';\nimport { getBasicAuthToken } from '../utils';\nimport { ModelFormat, adaptPrompt } from './processors/models';\n\nexport async function autocomplete(args: {\n    endpoint: string,\n    bearerToken: string,\n    model: string,\n    format: ModelFormat,\n    prefix: string,\n    suffix: string,\n    maxLines: number,\n    maxTokens: number,\n    temperature: number,\n    canceled?: () => boolean,\n}): Promise<string> {\n\n    let prompt = adaptPrompt({ prefix: args.prefix, suffix: args.suffix, format: args.format });\n\n    // Calculate arguments\n    let data = {\n        model: args.model,\n        prompt: prompt.prompt,\n        raw: true,\n        options: {\n            stop: prompt.stop,\n            num_predict: args.maxTokens,\n            temperature: args.temperature\n        }\n    };\n\n    // Receiving tokens\n    let res = '';\n    let totalLines = 1;\n    let blockStack: ('[' | '(' | '{')[] = [];\n    outer: for await (let tokens of ollamaTokenGenerator(args.endpoint + '/api/generate', data, args.bearerToken)) {\n        if (args.canceled && args.canceled()) {\n            break;\n        }\n\n        // Block stack\n        for (let c of tokens.response) {\n\n            // Open block\n            if (c === '[') {\n                blockStack.push('[');\n            } else if (c === '(') {\n                blockStack.push('(');\n            }\n            if (c === '{') {\n                blockStack.push('{');\n            }\n\n            // Close block\n            if (c === ']') {\n                if (blockStack.length > 0 && blockStack[blockStack.length - 1] === '[') {\n                    blockStack.pop();\n                } else {\n                    console.log('Block stack error, breaking.');\n                    break outer;\n                }\n            }\n            if (c === ')') {\n                if (blockStack.length > 0 && blockStack[blockStack.length - 1] === '(') {\n                    blockStack.pop();\n                } else {\n                    console.log('Block stack error, breaking.');\n                    break outer;\n                }\n            }\n            if (c === '}') {\n                if (blockStack.length > 0 && blockStack[blockStack.length - 1] === '{') {\n                    blockStack.pop();\n                } else {\n                    console.log('Block stack error, breaking.');\n                    break outer;\n                }\n            }\n\n            // Append charater\n            res += c;\n        }\n\n        // Update total lines\n        totalLines += countSymbol(tokens.response, '\\n');\n        // Break if too many lines and on top level\n        if (totalLines > args.maxLines && blockStack.length === 0) {\n            console.log('Too many lines, breaking.');\n            break;\n        }\n    }\n\n    // Remove <EOT>\n    if (res.endsWith('<EOT>')) {\n        res = res.slice(0, res.length - 5);\n    }\n\n    // Trim ends of all lines since sometimes the AI completion will add extra spaces\n    res = res.split('\\n').map((v) => v.trimEnd()).join('\\n');\n\n    return res;\n}\n\n\nexport async function dappforgeAutocomplete(args: {\n    endpoint: string,\n    bearerToken: string,\n    model: string,\n    format: ModelFormat,\n    prefix: string,\n    suffix: string,\n    maxLines: number,\n    maxTokens: number,\n    temperature: number,\n    canceled?: () => boolean,\n}): Promise<string> {\n\n    const preparedPrompt: string = prepareAIPrompt(args.prefix);\n    const prompt = {\"prefix_code\": preparedPrompt };\n    console.log(`prompt: ${JSON.stringify(prompt, undefined, 2)}`);\n    const url = `${TokenManager.getToken(API_BASE_URL)}/ai/generate_code/${TokenManager.getToken(USER_ID_KEY)}`;\n    const basicAuthHeader = `Basic ${getBasicAuthToken()}`;\n    console.log(`url: ${url} prompt: ${JSON.stringify(prompt)} auth: ${basicAuthHeader}`);\n    const accessToken = TokenManager.getToken(ACCESS_TOKEN_KEY) || '';\n    const refreshToken = TokenManager.getToken(REFRESH_TOKEN_KEY) || '';\n\n    // Request\n    let res = await fetch(url, {\n        method: 'POST',\n        body: JSON.stringify(prompt),\n        headers: {\n            Authorization: basicAuthHeader,\n            'Content-Type': 'application/json; charset=UTF-8',\n            \"Accept\": \"application/json\",\n            'access-token': accessToken,\n            'refresh-token': refreshToken\n        },\n        signal: AbortSignal.timeout(120000)\n    });\n    if (!res.ok || !res.body) {\n        if (res.body) {\n            let detail: string = '';\n            let body = await res.text();\n            if (body.includes('completed_code')) {\n                const data: any = await res.json();\n                console.log(`completed_code: ${JSON.stringify(data, undefined, 2)}`);\n                if (data.hasOwnProperty('detail')) {  \n                    detail = data.detail;\n                }\n            } else {\n                detail = body;\n            }\n            throw Error(`Error when trying to query the AI, status: ${res.status} error: ${detail}`);            \n        }\n        throw Error('Unable to connect to backend');\n    } \n    if (res.status !== 200) {\n        let detail: string = '';\n        const data: any = await res.json();\n        console.log(`completed_code: ${JSON.stringify(data, undefined, 2)}`);\n        if (data.hasOwnProperty('detail')) {  \n            detail = data.detail;\n        }\n        throw Error(`Error when trying to query the AI, status: ${res.status} error: ${detail}`);\n    }\n    console.log(`res.body: ${res.body}`);\n    const data: any = await res.json();\n    console.log(`returned code: ${JSON.stringify(data, undefined, 2)}`);\n\n    let code: string = '';\n    if (data.hasOwnProperty('generated_code')) {\n        code = data.generated_code;\n        code = unescapeControlCharacters(code)\n        //code = code.replace(/\\\\n/g, '\\n');\n        // Trim ends of all lines since sometimes the AI completion will add extra spaces\n        code = code.split('\\n').map((v) => v.trimEnd()).join('\\n');\n        console.log(`completed_code: ${code}`);\n    }\n    console.log(`code: ${code}`);\n    return code;\n}\n\nfunction prepareAIPrompt(input: string, limit: number = 250): string {\n    // Step 1: Trim the input to the last `limit` characters\n    const trimmedInput = input.slice(-limit);\n  \n    // Step 2: Adjust start to ensure it begins with a complete word\n    // Find the index of the first space followed by a word character in the trimmed input\n    const startIndex = trimmedInput.search(/\\s\\w/);\n    const adjustedInput = startIndex !== -1 ? trimmedInput.slice(startIndex + 1) : trimmedInput;\n  \n    // Optional: Adjust to ensure starting with a complete sentence\n    const sentenceStartIndex = trimmedInput.search(/\\. \\w/);\n    const adjustedInputForSentence = sentenceStartIndex !== -1 ? trimmedInput.slice(sentenceStartIndex + 2) : adjustedInput;\n  \n    // Return the adjusted input\n    return adjustedInput.trim();\n}\n\nfunction unescapeControlCharacters(str: string): string {\n    // Define a mapping of escaped characters to their actual characters\n    const controlCharacterMap: { [key: string]: string } = {\n        '\\\\n': '\\n',\n        '\\\\t': '\\t',\n        '\\\\r': '\\r',\n        '\\\\b': '\\b',\n        '\\\\f': '\\f',\n        '\\\\v': '\\v',\n        '\\\\0': '\\0',\n        '\\\\\\\\': '\\\\', // To handle escaped backslash\n        '\\\\\"': '\"',  // To handle escaped double quote\n        \"\\\\'\": \"'\",  // To handle escaped single quote\n    };\n\n    // Create a regular expression to match all escaped control characters\n    const controlCharacterRegex = /\\\\[ntrbfv0\\\\'\"]/g;\n\n    // Replace the escaped sequences with their corresponding control characters\n    return str.replace(controlCharacterRegex, (match) => controlCharacterMap[match] || match);\n}\n","import path from 'path';\nimport type vscode from 'vscode';\n\nexport function isSupported(doc: vscode.TextDocument, aiProvider: string) {\n    return (doc.uri.scheme === 'file' || \n        doc.uri.scheme === 'vscode-notebook-cell' ||\n        doc.uri.scheme === 'vscode-remote') && \n        (aiProvider !== 'dAppForge' || (aiProvider === 'dAppForge' && path.extname(doc.uri.fsPath) === \".rs\"));\n}\n\nexport function isNotNeeded(doc: vscode.TextDocument, position: vscode.Position, context: vscode.InlineCompletionContext): boolean {\n\n    // Avoid autocomplete on empty lines\n    // const line = doc.lineAt(position.line).text.trim();\n    // if (line.trim() === '') {\n    //     return true;\n    // }\n\n    // Avoid autocomplete when system menu is shown (ghost text is hidden anyway)\n    // if (context.selectedCompletionInfo) {\n    //     return true;\n    // }\n\n    return false;\n}","import vscode from 'vscode';\nimport { detectLanguage } from './processors/detectLanguage';\nimport { fileHeaders } from './processors/fileHeaders';\nimport { languages } from './processors/languages';\nimport { config } from '../config';\n\nvar decoder = new TextDecoder(\"utf8\");\n\nfunction getNotebookDocument(document: vscode.TextDocument): vscode.NotebookDocument | undefined  {\n    return  vscode.workspace.notebookDocuments\n        .find(x => x.uri.path === document.uri.path);\n}\n\nexport async function preparePrompt(document: vscode.TextDocument, \n    position: vscode.Position, \n    context: vscode.InlineCompletionContext) {\n\n    // Load document text\n    let text = document.getText();\n    let offset = document.offsetAt(position);\n    let prefix = text.slice(0, offset);\n    let suffix: string = text.slice(offset);\n\n    let notebookConfig = config.notebook;\n\n    // If this is a notebook, add the surrounding cells to the prefix and suffix\n    let notebookDocument = getNotebookDocument(document);\n    let language = detectLanguage(document.uri.fsPath, document.languageId);\n    let commentStart: string | undefined = undefined;\n    if (language) {\n        commentStart = languages[language].comment?.start;\n    }\n\n    if (notebookDocument) {\n        let beforeCurrentCell = true;\n\n        let prefixCells = \"\";\n        let suffixCells = \"\";\n\n        notebookDocument.getCells().forEach((cell) => {\n            let out = \"\";\n\n            if (cell.document.uri.fragment === document.uri.fragment) {\n                beforeCurrentCell = false; // switch to suffix mode\n                return;\n            }\n            \n            // add the markdown cell output to the prompt as a comment\n            if (cell.kind === vscode.NotebookCellKind.Markup && commentStart) {\n                if (notebookConfig.includeMarkup) {\n                    for (const line of cell.document.getText().split('\\n')) {\n                        out += `\\n${commentStart}${line}`;\n                    }\n                }\n            } else {\n                out += cell.document.getText();\n            }\n\n            // if there is any outputs add them to the prompt as a comment\n            const addCellOutputs = notebookConfig.includeCellOutputs\n                                    && beforeCurrentCell\n                                    && cell.kind === vscode.NotebookCellKind.Code\n                                    && commentStart;\n            if (addCellOutputs) {\n                let cellOutputs = cell.outputs\n                    .map(x => x.items\n                                .filter(x => x.mime === 'text/plain')\n                                .map(x => decoder.decode(x.data))\n                                .map(x => x.slice(0, notebookConfig.cellOutputLimit).split('\\n')))\n                    .flat(3);\n                \n                if (cellOutputs.length > 0) {\n                    out += `\\n${commentStart}Output:`;\n                    for (const line of cellOutputs) {\n                        out += `\\n${commentStart}${line}`;\n                    }\n                }\n            }\n\n            // update the prefix/suffix\n            if (beforeCurrentCell) {\n                prefixCells += out;\n            } else {\n                suffixCells += out;\n            }\n\n        });\n\n        prefix = prefixCells + prefix;\n        suffix = suffix + suffixCells;\n    }\n\n    // Trim suffix\n    // If suffix is too small it is safe to assume that it could be ignored which would allow us to use\n    // more powerful completition instead of in middle one\n    // if (suffix.length < 256) {\n    //     suffix = null;\n    // }\n\n    // Add filename and language to prefix\n    // NOTE: Most networks don't have a concept of filenames and expected language, but we expect that some files in training set has something in title that \n    //       would indicate filename and language\n    // NOTE: If we can't detect language, we could ignore this since the number of languages that need detection is limited\n    //if (language && addFilename) {\n    //    prefix = fileHeaders(prefix, document.uri.fsPath, languages[language]);\n    //}\n\n    return {\n        prefix,\n        suffix,\n    };\n}","import path from 'path';\nimport { Language, languages } from './languages';\n\nlet aliases: { [key: string]: Language } = {\n    'typescriptreact': 'typescript',\n    'javascriptreact': 'javascript',\n    'jsx': 'javascript'\n};\n\nexport function detectLanguage(uri: string, languageId: string | null): Language | null {\n\n    // Resolve aliases\n    if (!!languageId && aliases[languageId]) {\n        return aliases[languageId];\n    }\n\n    // Resolve using language id\n    if (!!languageId && !!languages[languageId as Language]) {\n        return languageId as Language;\n    }\n\n    // Resolve using filename and extension\n    let basename = path.basename(uri);\n    let extname = path.extname(basename).toLowerCase();\n\n    // Check extensions\n    for (let lang in languages) {\n        let k = languages[lang as Language];\n        for (let ex of k.extensions) {\n            if (extname === ex) {\n                return lang as Language;\n            }\n        }\n    }\n\n    // Return result\n    return null;\n}","//\n// Well Known Languages\n//\n\nexport type Language =\n\n    // Web Languages\n    | 'typescript'\n    | 'javascript'\n    | 'html'\n    | 'css'\n    | 'json'\n    | 'yaml'\n    | 'xml'\n\n    // Generic languages that is popular in VS Code\n    | 'java'\n    | 'kotlin'\n    | 'swift'\n    | 'objective-c'\n    | 'rust'\n    | 'python'\n    | 'c'\n    | 'cpp'\n    | 'go'\n    | 'php'\n\n    // Shell\n    | 'bat'\n    | 'shellscript'\n\n    ;\n\nexport type LanguageDescriptor = {\n    name: string,\n    extensions: string[],\n    filenames?: string[],\n    comment?: { start: string, end?: string }\n};\n\n//\n// List of well known languages\n// \n// Extensions from: https://github.com/github-linguist/linguist/blob/master/lib/linguist/languages.yml\n//\n\nexport const languages: { [key in Language]: LanguageDescriptor } = {\n\n    // Web languages\n    typescript: {\n        name: 'Typescript',\n        extensions: ['.ts', '.tsx', '.cts', '.mts'],\n        comment: { start: '//' }\n    },\n    javascript: {\n        name: 'Javascript',\n        extensions: ['.js', '.jsx', '.cjs'],\n        comment: { start: '//' }\n    },\n    html: {\n        name: 'HTML',\n        extensions: ['.htm', '.html'],\n        comment: { start: '<!--', end: '-->' }\n    },\n    css: {\n        name: 'CSS',\n        extensions: ['.css', '.scss', '.sass', '.less'],\n        // comment: { start: '/*', end: '*/' } // Disable comments for CSS - not useful anyway\n    },\n    json: {\n        name: 'JSON',\n        extensions: ['.json', '.jsonl', '.geojson'],\n        // comment: { start: '//' } // Disable comments for CSS - not useful anyway\n    },\n    yaml: {\n        name: 'YAML',\n        extensions: ['.yml', '.yaml'],\n        comment: { start: '#' }\n    },\n    xml: {\n        name: 'XML',\n        extensions: ['.xml'],\n        comment: { start: '<!--', end: '-->' }\n    },\n\n    // Generic languages\n    java: {\n        name: 'Java',\n        extensions: ['.java'],\n        comment: { start: '//' }\n    },\n    kotlin: {\n        name: 'Kotlin',\n        extensions: ['.kt', '.ktm', '.kts'],\n        comment: { start: '//' }\n    },\n    swift: {\n        name: 'Swift',\n        extensions: ['.swift'],\n        comment: { start: '//' }\n    },\n    \"objective-c\": {\n        name: 'Objective C',\n        extensions: ['.h', '.m', '.mm'],\n        comment: { start: '//' }\n    },\n    rust: {\n        name: 'Rust',\n        extensions: ['.rs', '.rs.in'],\n        comment: { start: '//' }\n    },\n    python: {\n        name: 'Python',\n        extensions: ['.py', 'ipynb'],\n        comment: { start: '#' }\n    },\n    c: {\n        name: 'C',\n        extensions: ['.c', '.h'],\n        comment: { start: '//' }\n    },\n    cpp: {\n        name: 'C++',\n        extensions: ['.cpp', '.h'],\n        comment: { start: '//' }\n    },\n    go: {\n        name: 'Go',\n        extensions: ['.go'],\n        comment: { start: '//' }\n    },\n    php: {\n        name: 'PHP',\n        extensions: ['.aw', '.ctp', '.fcgi', '.inc', '.php', '.php3', '.php4', '.php5', '.phps', '.phpt'],\n        comment: { start: '//' }\n    },\n\n    // Shell\n    bat: {\n        name: 'BAT file',\n        extensions: ['.bat', '.cmd'],\n        comment: { start: 'REM' }\n    },\n    shellscript: {\n        name: 'Shell',\n        extensions: ['.bash', '.sh'],\n        comment: { start: '#' }\n    }\n};","export type ModelFormat = 'codellama' | 'deepseek' | 'stable-code';\n\nexport function adaptPrompt(args: { format: ModelFormat, prefix: string, suffix: string }): { prompt: string, stop: string[] } {\n\n    // Common non FIM mode\n    // if (!args.suffix) {\n    //     return {\n    //         prompt: args.prefix,\n    //         stop: [`<END>`]\n    //     };\n    // }\n\n    // Starcoder FIM\n    if (args.format === 'deepseek') {\n        return {\n            prompt: `<｜fim▁begin｜>${args.prefix}<｜fim▁hole｜>${args.suffix}<｜fim▁end｜>`,\n            stop: [`<｜fim▁begin｜>`, `<｜fim▁hole｜>`, `<｜fim▁end｜>`, `<END>`]\n        };\n    }\n\n    // Stable code FIM\n    if (args.format === 'stable-code') {\n        return {\n            prompt: `<fim_prefix>${args.prefix}<fim_suffix>${args.suffix}<fim_middle>`,\n            stop: [`<|endoftext|>`]\n        };\n    }\n\n    // Codellama FIM\n    return {\n        prompt: `<PRE> ${args.prefix} <SUF> ${args.suffix} <MID>`,\n        stop: [`<END>`, `<EOD>`, `<EOT>`]\n    };\n}","\n// Remove all newlines, double spaces, etc\nfunction normalizeText(src: string) {\n    src = src.split('\\n').join(' ');\n    src = src.replace(/\\s+/gm, ' ');\n    return src;\n}\n\nfunction extractPromptCacheKey(args: { prefix: string, suffix: string | null }) {\n    if (args.suffix) {\n        return normalizeText(args.prefix + ' ##CURSOR## ' + args.suffix);\n    } else {\n        return normalizeText(args.prefix);\n    }\n}\n\n// TODO: make it LRU\nlet cache: { [key: string]: string | null } = {};\n\nexport function getFromPromptCache(args: { prefix: string, suffix: string | null }): string | undefined | null {\n    const key = extractPromptCacheKey(args);\n    return cache[key];\n}\n\nexport function setPromptToCache(args: { prefix: string, suffix: string | null, value: string | null }) {\n    const key = extractPromptCacheKey(args);\n    cache[key] = args.value;\n}","import * as vscode from \"vscode\";\nimport { authenticate } from \"../modules/authenticate\";\nimport { getNonce } from \"../getNonce\";\nimport { API_BASE_URL, TOKEN_COUNT, TokenManager } from \"../modules/TokenManager\";\n\nexport class SidebarProvider implements vscode.WebviewViewProvider {\n  _view?: vscode.WebviewView;\n  _doc?: vscode.TextDocument;\n\n  constructor(private readonly _extensionUri: vscode.Uri) {}\n\n  public postMessageToWebview(message: any) {\n    // Post message to webview\n    this._view?.webview.postMessage(message);\n  }\n  \n  public resolveWebviewView(webviewView: vscode.WebviewView) {\n    this._view = webviewView;\n\n    webviewView.webview.options = {\n      // Allow scripts in the webview\n      enableScripts: true,\n\n      localResourceRoots: [this._extensionUri],\n    };\n\n    webviewView.webview.html = this._getHtmlForWebview(webviewView.webview);\n\n    webviewView.webview.onDidReceiveMessage(async (data) => {\n      console.log(`---><><> onDidReceiveMessage ${JSON.stringify(data, undefined, 2)}`);\n      switch (data.type) {\n        case \"logout\": {\n          TokenManager.resetTokens();\n          vscode.commands.executeCommand('dappforge.unauthorised');\n          break;\n        }\n        case \"authenticate\": {\n          authenticate(() => {\n            webviewView.webview.postMessage({\n              type: \"token\",\n              value: TokenManager.getTokensAsJsonString()\n            });\n          });\n          break;\n        }\n        case \"logged-in-out\": {\n          if (!data.value) {\n            TokenManager.resetTokens();\n            vscode.commands.executeCommand('dappforge.unauthorised');\n          } else {\n            TokenManager.setToken(TOKEN_COUNT, String(data.value.tokenCount));\n            if (data.value.tokenCount <= 0) {\n              vscode.commands.executeCommand('dappforge.unauthorised');\n            } else {\n              vscode.commands.executeCommand('dappforge.authorised');\n            }\n          }\n          break;\n        }\n        case \"get-token\": {\n          webviewView.webview.postMessage({\n            type: \"token\",\n            value: TokenManager.getTokensAsJsonString()\n          });\n          break;\n        }\n        case \"onInfo\": {\n          if (!data.value) {\n            return;\n          }\n          vscode.window.showInformationMessage(data.value);\n          break;\n        }\n        case \"onError\": {\n          if (!data.value) {\n            return;\n          }\n          vscode.window.showErrorMessage(data.value);\n          break;\n        }\n      }\n    });\n  }\n\n  public revive(panel: vscode.WebviewView) {\n    this._view = panel;\n  }\n\n  private _getHtmlForWebview(webview: vscode.Webview) {\n    const styleResetUri = webview.asWebviewUri(\n      vscode.Uri.joinPath(this._extensionUri, \"media\", \"reset.css\")\n    );\n    const styleVSCodeUri = webview.asWebviewUri(\n      vscode.Uri.joinPath(this._extensionUri, \"media\", \"vscode.css\")\n    );\n\n    const scriptUri = webview.asWebviewUri(\n      vscode.Uri.joinPath(this._extensionUri, \"out\", \"compiled/sidebar.js\")\n    );\n    const styleMainUri = webview.asWebviewUri(\n      vscode.Uri.joinPath(this._extensionUri, \"out\", \"compiled/sidebar.css\")\n    );\n\n    // Use a nonce to only allow a specific script to be run.\n    const nonce = getNonce();\n\n    return `<!DOCTYPE html>\n\t\t\t<html lang=\"en\">\n\t\t\t<head>\n\t\t\t\t<meta charset=\"UTF-8\">\n\t\t\t\t<!--\n\t\t\t\t\tUse a content security policy to only allow loading images from https or from our extension directory,\n\t\t\t\t\tand only allow scripts that have a specific nonce.\n        -->\n        <meta http-equiv=\"Content-Security-Policy\" content=\"img-src https: data:; style-src 'unsafe-inline' ${\n          webview.cspSource\n        }; script-src 'nonce-${nonce}';\">\n\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t\t\t<link href=\"${styleResetUri}\" rel=\"stylesheet\">\n\t\t\t\t<link href=\"${styleVSCodeUri}\" rel=\"stylesheet\">\n        <link href=\"${styleMainUri}\" rel=\"stylesheet\">\n        <script nonce=\"${nonce}\">\n          const tsvscode = acquireVsCodeApi();\n          const apiBaseUrl = ${JSON.stringify(TokenManager.getToken(API_BASE_URL))}\n        </script>\n\t\t\t</head>\n      <body>\n\t\t\t\t<script nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\n\t\t\t</body>\n\t\t\t</html>`;\n  }\n}\n","import vscode from 'vscode';\nimport { autocomplete, dappforgeAutocomplete } from '../prompts/autocomplete';\nimport { preparePrompt } from '../prompts/preparePrompt';\nimport { AsyncLock } from '../modules/lock';\nimport { getFromPromptCache, setPromptToCache } from '../prompts/promptCache';\nimport { isNotNeeded, isSupported } from '../prompts/filter';\nimport { ollamaCheckModel } from '../modules/ollamaCheckModel';\nimport { ollamaDownloadModel } from '../modules/ollamaDownloadModel';\nimport { config } from '../config';\nimport { ACCESS_TOKEN_KEY, API_BASE_URL, AUTO_COMPLETE_ACTIVE, BASIC_AUTH_TOKEN, REFRESH_TOKEN_KEY, TOKEN_COUNT, TokenManager, USER_ID_KEY } from '../modules/TokenManager';\nimport { INLINE_COMPLETION_ACCEPTED_COMMAND } from '../constants';\nimport { SidebarProvider } from './SidebarProvider';\n\ntype Status = {\n    icon: string;\n    text: string;\n};\n\nexport class PromptProvider implements vscode.InlineCompletionItemProvider {\n\n    lock = new AsyncLock();\n    statusbar: vscode.StatusBarItem;\n    context: vscode.ExtensionContext;\n    private _paused: boolean = true;\n    private _solution_accepted: boolean = false;\n    private _authorised: boolean = false;\n    private _processing_request: boolean = false;\n    private _status: Status = { icon: \"chip\", text: \"dAppForge\" };\n\n    constructor(\n        statusbar: vscode.StatusBarItem, \n        context: vscode.ExtensionContext\n    ) {\n        this.statusbar = statusbar;\n        this.context = context;\n        this._authorised = TokenManager.loggedIn();\n        this._paused = TokenManager.getToken(AUTO_COMPLETE_ACTIVE) === 'true';\n        this.update();\n    }\n\n    public set authorised(value: boolean) {\n        this._authorised = TokenManager.loggedIn();\n        this.update();\n    }\n\n    public get authorised(): boolean {\n        return this._authorised;\n    }\n    \n    public set paused(value: boolean) {\n        this._paused = value;\n        TokenManager.setToken(AUTO_COMPLETE_ACTIVE, `${value}`);\n        this.update();\n    }\n\n    public get paused(): boolean {\n        if (!TokenManager.loggedIn()) {\n            return true;\n        }\n        return this._paused;\n    }\n\n    private update(icon?: string, text?: string): void {\n        this._status.icon = icon ? icon : this._status.icon;\n        this._status.text = text ? text : this._status.text;\n\n        let statusText = '';\n        let statusTooltip = '';\n        if (this.paused || !this.authorised) {\n            statusText = `$(sync-ignored) ${this._status.text}`;\n            statusTooltip = `${this._status.text} (Paused)`;\n        } else {\n            statusText = `$(${this._status.icon}) ${this._status.text}`;\n            statusTooltip = `${this._status.text}`;\n        }\n        this.statusbar.text = statusText;\n        this.statusbar.tooltip = statusTooltip;\n    }\n\n    async delayCompletion(delay: number, token: vscode.CancellationToken): Promise<boolean> {\n        if (config.inference.delay < 0) {\n            return false;\n        }\n        await new Promise(p => setTimeout(p, delay));\n        if (token.isCancellationRequested) {\n            return false;\n        }\n        return true;\n    }\n\n    async provideInlineCompletionItems(document: vscode.TextDocument, position: vscode.Position, context: vscode.InlineCompletionContext, token: vscode.CancellationToken): Promise<vscode.InlineCompletionItem[] | vscode.InlineCompletionList | undefined | null> {\n        if (!await this.delayCompletion(config.inference.delay, token) || this._solution_accepted ) { // || this._processing_request) {\n            if (this._solution_accepted) { console.log(`xxxxxxx do not query AI as solution was accepted`); }\n            // Do not do another AI request when a solution is accepted\n            this._solution_accepted = false;\n            return;\n        }\n\n        try {\n            if (this.paused || !this.authorised) {\n                return;\n            }\n\n            console.log(`provideInlineCompletionItems:document: ${JSON.stringify(document, undefined ,2)}`);\n            console.log(`setting res at position: ${JSON.stringify(position, undefined, 2)} context: ${JSON.stringify(context, undefined, 2)}`);\n\n            // Config\n            let inferenceConfig = config.inference;\n\n            // Ignore unsupported documents\n            if (!isSupported(document, inferenceConfig.aiProvider)) {\n                console.log(`Unsupported document: ${document.uri.toString()} ignored.`);\n                return;\n            }\n\n            // Ignore if not needed\n            if (isNotNeeded(document, position, context)) {\n                console.log('No inline completion required');\n                return;\n            }\n\n            // Ignore if already canceled\n            if (token.isCancellationRequested) {\n                console.log(`Canceled before AI completion.`);\n                return;\n            }\n\n            console.log('Before lock');\n\n            this._processing_request = true;\n\n            // Execute in lock\n            return await this.lock.inLock(async () => {\n                console.log('In lock');\n\n                if (this._solution_accepted) { return; }\n\n                // Prepare context\n                let prepared = await preparePrompt(document, position, context);\n                if (token.isCancellationRequested) {\n                    console.log(`Canceled before AI completion.`);\n                    return;\n                }\n\n                console.log('Start to process AI request');\n\n                // Result\n                let res: string | null = null;\n\n                console.log(`<><><><>prepared.prefix: ${prepared.prefix} prepared.suffix: ${prepared.suffix} prepared.prefix.length: ${prepared.prefix?.length}`);\n\n                // Check if in cache\n                let cached = getFromPromptCache({\n                    prefix: prepared.prefix,\n                    suffix: prepared.suffix\n                });\n\n                // If not cached\n                if (cached === undefined) {\n                    console.log('not in cache');\n\n                    // Update status\n                    this.update('sync~spin', 'dAppForge');\n                    try {\n                        console.log(`inferenceConfig.aiProvider: ${inferenceConfig.aiProvider}`);\n                        if (inferenceConfig.aiProvider === \"Ollama\") {\n\n                            // Check model exists\n                            let modelExists = await ollamaCheckModel(inferenceConfig.endpoint, inferenceConfig.modelName, inferenceConfig.bearerToken);\n                            if (token.isCancellationRequested) {\n                                console.log(`Canceled after AI completion.`);\n                                return;\n                            }\n\n                            // Download model if not exists\n                            if (!modelExists) {\n\n                                // Check if user asked to ignore download\n                                if (this.context.globalState.get('llama-coder-download-ignored') === inferenceConfig.modelName) {\n                                    console.log(`Ingoring since user asked to ignore download.`);\n                                    return;\n                                }\n\n                                // Ask for download\n                                let download = await vscode.window.showInformationMessage(`Model ${inferenceConfig.modelName} is not downloaded. Do you want to download it? Answering \"No\" would require you to manually download model.`, 'Yes', 'No');\n                                if (download === 'No') {\n                                    console.log(`Ingoring since user asked to ignore download.`);\n                                    this.context.globalState.update('llama-coder-download-ignored', inferenceConfig.modelName);\n                                    return;\n                                }\n\n                                // Perform download\n                                this.update('sync~spin', 'Downloading');\n                                await ollamaDownloadModel(inferenceConfig.endpoint, inferenceConfig.modelName, inferenceConfig.bearerToken);\n                                this.update('sync~spin', 'dAppForge');\n                            }\n                            if (token.isCancellationRequested) {\n                                console.log(`Canceled after AI completion.`);\n                                return;\n                            }\n\n                            // Run AI completion\n                            console.log(`Running AI completion...`);\n                            res = await autocomplete({\n                                prefix: prepared.prefix,\n                                suffix: prepared.suffix,\n                                endpoint: inferenceConfig.endpoint,\n                                bearerToken: inferenceConfig.bearerToken,\n                                model: inferenceConfig.modelName,\n                                format: inferenceConfig.modelFormat,\n                                maxLines: inferenceConfig.maxLines,\n                                maxTokens: inferenceConfig.maxTokens,\n                                temperature: inferenceConfig.temperature,\n                                canceled: () => token.isCancellationRequested,\n                            });\n                        } else {\n                            // Run AI completion\n                            console.log(`Running dAppForge AI completion...`);\n                            res = await dappforgeAutocomplete({\n                                prefix: prepared.prefix,\n                                suffix: prepared.suffix,\n                                endpoint: inferenceConfig.endpoint,\n                                bearerToken: inferenceConfig.bearerToken,\n                                model: inferenceConfig.modelName,\n                                format: inferenceConfig.modelFormat,\n                                maxLines: inferenceConfig.maxLines,\n                                maxTokens: inferenceConfig.maxTokens,\n                                temperature: inferenceConfig.temperature,\n                                canceled: () => token.isCancellationRequested,\n                            });\n                        }\n                        console.log(`AI completion completed: ${res}`);\n\n                        console.log(`store in cache prepared.prefix: ${prepared.prefix} prepared.suffix: ${prepared.suffix} res: ${res}`);\n\n                        // Put to cache\n                        setPromptToCache({\n                            prefix: prepared.prefix,\n                            suffix: prepared.suffix,\n                            value: res\n                        });\n                    } finally {\n                        this.update('chip', 'dAppForge');\n                    }\n                } else {\n                    if (cached !== null) {\n                        res = cached;\n                    }\n                }\n                if (token.isCancellationRequested) {\n                    console.log(`Canceled after AI completion.`);\n                    return;\n                }\n\n                // Return result\n                if (res && res.trim() !== '') {\n                    console.log(`setting res at position: ${JSON.stringify(position, undefined, 2)}`);\n                    const completionItems: vscode.InlineCompletionItem[] = [];\n                    const completionItem = new vscode.InlineCompletionItem(res, new vscode.Range(position, position));\n        \n                    // Attach the command to the completion item so we can detect when its been accepted\n                    completionItem.command = {\n                        command: INLINE_COMPLETION_ACCEPTED_COMMAND,\n                        title: 'Inline Completion Accepted'\n                    };\n        \n                    completionItems.push(completionItem);\n        \n                    return completionItems;\n                }\n\n                // Nothing to complete\n                return;\n            });\n        } catch (e) {\n            console.log('Error during inference:', e);\n            vscode.window.showErrorMessage((e as Error).message);\n        } finally {\n            this._processing_request = false;\n        }\n    }\n\n    async completionAccepted(sidebarProvider: SidebarProvider, cost: number) {\n        if (TokenManager.loggedIn() && !this.paused) {\n            console.log(\"Call endpoint to reduce count\");\n            this._solution_accepted = true;\n            try {\n                let res = await fetch(\n                    `${TokenManager.getToken(API_BASE_URL)}/ai/reduce_token_count/${TokenManager.getToken(USER_ID_KEY)}`,\n                {\n                    method: \"POST\",\n                    body: JSON.stringify({ cost: cost }),\n                    headers: {\n                    authorization: `Basic ${TokenManager.getToken(BASIC_AUTH_TOKEN)}`,\n                    \"Content-Type\": \"application/json\",\n                    \"access-token\": TokenManager.getToken(ACCESS_TOKEN_KEY) || '',\n                    \"refresh-token\": TokenManager.getToken(REFRESH_TOKEN_KEY) || ''\n                    },\n                }\n                );\n                if (!res.ok || !res.body) {\n                throw Error(\"Unable to connect to backend\");\n                }\n                console.log(`res.body: ${res.body}`);\n                const json: any = await res.json();\n                console.log(\n                `returned code: ${JSON.stringify(json, undefined, 2)}`\n                );\n                TokenManager.setToken(TOKEN_COUNT, String(json.tokenCount));\n                if (json.tokenCount <= 0) {\n                    vscode.commands.executeCommand('dappforge.unauthorised');\n                } else {\n                    vscode.commands.executeCommand('dappforge.authorised');\n                }\n                sidebarProvider.postMessageToWebview({ \n                    type: \"update-token-count\", \n                    value: json.tokenCount });    \n            } catch (e) {\n                console.log('Error when trying to charge for the AI completion:', e);\n                vscode.window.showErrorMessage((e as Error).message);\n            }\n        }\n    }\n}","\nexport const USERNAME=\"dappforge-api-user\";\nexport const PASSWORD=\"d8pp4ge-8pi-p8ssan-AI_app?thatwillanswerQuestions\";\n\nexport function getBasicAuthToken(): string {\n    return Buffer.from(USERNAME + \":\" + PASSWORD).toString('base64');\n}\n","module.exports = require(\"vscode\");","module.exports = require(\"http\");","module.exports = require(\"path\");","module.exports = require(\"querystring\");","export default function (arr, cb) {\n\tvar i=0, len=arr.length;\n\n\tfor (; i < len; i++) {\n\t\tif (!cb(arr[i], i, arr)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n","'use strict';\n\nimport every from '@arr/every';\n\nconst SEP = '/';\n// Types ~> static, param, any, optional\nconst STYPE=0, PTYPE=1, ATYPE=2, OTYPE=3;\n// Char Codes ~> / : *\nconst SLASH=47, COLON=58, ASTER=42, QMARK=63;\n\nfunction strip(str) {\n\tif (str === SEP) return str;\n\t(str.charCodeAt(0) === SLASH) && (str=str.substring(1));\n\tvar len = str.length - 1;\n\treturn str.charCodeAt(len) === SLASH ? str.substring(0, len) : str;\n}\n\nfunction split(str) {\n\treturn (str=strip(str)) === SEP ? [SEP] : str.split(SEP);\n}\n\nfunction isMatch(arr, obj, idx) {\n\tidx = arr[idx];\n\treturn (obj.val === idx && obj.type === STYPE) || (idx === SEP ? obj.type > PTYPE : obj.type !== STYPE && (idx || '').endsWith(obj.end));\n}\n\nexport function match(str, all) {\n\tvar i=0, tmp, segs=split(str), len=segs.length, l;\n\tvar fn = isMatch.bind(isMatch, segs);\n\n\tfor (; i < all.length; i++) {\n\t\ttmp = all[i];\n\t\tif ((l=tmp.length) === len || (l < len && tmp[l-1].type === ATYPE) || (l > len && tmp[l-1].type === OTYPE)) {\n\t\t\tif (every(tmp, fn)) return tmp;\n\t\t}\n\t}\n\n\treturn [];\n}\n\nexport function parse(str) {\n\tif (str === SEP) {\n\t\treturn [{ old:str, type:STYPE, val:str, end:'' }];\n\t}\n\n\tvar c, x, t, sfx, nxt=strip(str), i=-1, j=0, len=nxt.length, out=[];\n\n\twhile (++i < len) {\n\t\tc = nxt.charCodeAt(i);\n\n\t\tif (c === COLON) {\n\t\t\tj = i + 1; // begining of param\n\t\t\tt = PTYPE; // set type\n\t\t\tx = 0; // reset mark\n\t\t\tsfx = '';\n\n\t\t\twhile (i < len && nxt.charCodeAt(i) !== SLASH) {\n\t\t\t\tc = nxt.charCodeAt(i);\n\t\t\t\tif (c === QMARK) {\n\t\t\t\t\tx=i; t=OTYPE;\n\t\t\t\t} else if (c === 46 && sfx.length === 0) {\n\t\t\t\t\tsfx = nxt.substring(x=i);\n\t\t\t\t}\n\t\t\t\ti++; // move on\n\t\t\t}\n\n\t\t\tout.push({\n\t\t\t\told: str,\n\t\t\t\ttype: t,\n\t\t\t\tval: nxt.substring(j, x||i),\n\t\t\t\tend: sfx\n\t\t\t});\n\n\t\t\t// shorten string & update pointers\n\t\t\tnxt=nxt.substring(i); len-=i; i=0;\n\n\t\t\tcontinue; // loop\n\t\t} else if (c === ASTER) {\n\t\t\tout.push({\n\t\t\t\told: str,\n\t\t\t\ttype: ATYPE,\n\t\t\t\tval: nxt.substring(i),\n\t\t\t\tend: ''\n\t\t\t});\n\t\t\tcontinue; // loop\n\t\t} else {\n\t\t\tj = i;\n\t\t\twhile (i < len && nxt.charCodeAt(i) !== SLASH) {\n\t\t\t\t++i; // skip to next slash\n\t\t\t}\n\t\t\tout.push({\n\t\t\t\told: str,\n\t\t\t\ttype: STYPE,\n\t\t\t\tval: nxt.substring(j, i),\n\t\t\t\tend: ''\n\t\t\t});\n\t\t\t// shorten string & update pointers\n\t\t\tnxt=nxt.substring(i); len-=i; i=j=0;\n\t\t}\n\t}\n\n\treturn out;\n}\n\nexport function exec(str, arr) {\n\tvar i=0, x, y, segs=split(str), out={};\n\tfor (; i < arr.length; i++) {\n\t\tx=segs[i]; y=arr[i];\n\t\tif (x === SEP) continue;\n\t\tif (x !== void 0 && y.type | 2 === OTYPE) {\n\t\t\tout[ y.val ] = x.replace(y.end, '');\n\t\t}\n\t}\n\treturn out;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["module","exports","req","url","obj","_parsedUrl","_raw","query","search","href","path","pathname","idx","indexOf","substring","http","Router","parse","parser","lead","x","charCodeAt","value","y","mutate","str","length","onError","err","res","next","code","statusCode","status","end","message","STATUS_CODES","Polka","constructor","opts","super","this","apps","wares","bwares","server","handler","bind","onNoMatch","add","method","pattern","fns","base","Error","toLowerCase","use","concat","forEach","fn","arr","push","r","_","nxt","listen","createServer","on","apply","arguments","info","find","originalUrl","handlers","params","i","len","num","loop","finished","exec","match","routes","all","get","head","patch","options","connect","delete","trace","post","put","old","config","inference","aiProvider","trim","endpoint","endsWith","slice","bearerToken","maxLines","maxTokens","temperature","modelName","modelFormat","startsWith","delay","notebook","workspace","getConfiguration","includeMarkup","includeCellOutputs","cellOutputLimit","environment","SERVER_PORT","INLINE_COMPLETION_ACCEPTED_COMMAND","context","vscode","console","log","TokenManager","globalState","setBasicAuthToken","loggedIn","resetTokens","setToken","API_BASE_URL","getApiBaseUrl","statusBarItem","window","createStatusBarItem","StatusBarAlignment","Right","subscriptions","command","text","show","commands","registerCommand","executeCommand","provider","PromptProvider","languages","registerInlineCompletionItemProvider","paused","authorised","sidebarProvider","SidebarProvider","extensionUri","registerWebviewViewProvider","authenticate","async","completionAccepted","charAt","Math","floor","possible","random","ACCESS_TOKEN_KEY","REFRESH_TOKEN_KEY","USER_ID_KEY","BASIC_AUTH_TOKEN","TOKEN_COUNT","AUTO_COMPLETE_ACTIVE","static","getBasicAuthToken","key","token","update","getToken","getTokensAsJsonString","JSON","stringify","basicAuthToken","userId","accessToken","refreshToken","setTokens","id","getTokenCount","count","Number","app","close","apiBaseUrl","showErrorMessage","Uri","data","controller","AbortController","fetch","body","headers","Authorization","signal","ok","stream","getReader","decoder","TextDecoder","pending","done","read","chunk","decode","warn","offset","releaseLock","closed","cancel","abort","permits","promiseResolverQueue","inLock","func","lock","unlock","Promise","resolve","nextResolver","shift","setTimeout","model","json","models","v","name","line","lineGenerator","parsed","e","isBlank","src","indentWidth","countSymbol","char","lines","split","indents","filter","map","minimal","min","trimEnd","join","splice","args","prompt","adaptPrompt","prefix","suffix","format","raw","stop","num_predict","totalLines","blockStack","outer","tokens","ollamaTokenGenerator","canceled","c","response","pop","input","limit","trimmedInput","startIndex","adjustedInput","sentenceStartIndex","prepareAIPrompt","undefined","basicAuthHeader","AbortSignal","timeout","detail","includes","hasOwnProperty","generated_code","controlCharacterMap","replace","unescapeControlCharacters","doc","uri","scheme","extname","fsPath","position","document","commentStart","getText","offsetAt","notebookConfig","notebookDocument","notebookDocuments","getNotebookDocument","language","detectLanguage","languageId","comment","start","beforeCurrentCell","prefixCells","suffixCells","getCells","cell","out","fragment","kind","NotebookCellKind","Markup","Code","cellOutputs","outputs","items","mime","flat","aliases","basename","lang","k","ex","extensions","typescript","javascript","html","css","yaml","xml","java","kotlin","swift","rust","python","cpp","go","php","bat","shellscript","normalizeText","extractPromptCacheKey","cache","_extensionUri","_view","_doc","postMessageToWebview","webview","postMessage","resolveWebviewView","webviewView","enableScripts","localResourceRoots","_getHtmlForWebview","onDidReceiveMessage","type","String","tokenCount","showInformationMessage","revive","panel","styleResetUri","asWebviewUri","joinPath","styleVSCodeUri","scriptUri","styleMainUri","nonce","getNonce","cspSource","AsyncLock","statusbar","_paused","_solution_accepted","_authorised","_processing_request","_status","icon","statusText","statusTooltip","tooltip","delayCompletion","p","isCancellationRequested","provideInlineCompletionItems","inferenceConfig","isSupported","isNotNeeded","prepared","preparePrompt","cached","getFromPromptCache","modelExists","ollamaCheckModel","ollamaDownloadModel","autocomplete","dappforgeAutocomplete","setPromptToCache","completionItems","completionItem","InlineCompletionItem","Range","title","toString","cost","authorization","USERNAME","PASSWORD","Buffer","from","require","cb","SEP","STYPE","PTYPE","ATYPE","OTYPE","SLASH","COLON","ASTER","QMARK","strip","isMatch","val","tmp","l","segs","t","sfx","j","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","d","definition","o","Object","defineProperty","enumerable","prop","prototype","Symbol","toStringTag","__webpack_exports__"],"sourceRoot":""}